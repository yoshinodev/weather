/**
 * WeatherAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class APIsController {
    /**
     * Current weather or realtime weather API method allows a user to get up to date current
     * weather information in json and xml. The data is returned as a Current Object.Current
     * object contains current or realtime weather information for a given city.
     *
     * @param {string} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address,
     * Latitude/Longitude (decimal degree) or city name. Visit [request parameter
     * section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {string} lang (optional) Returns 'condition:text' field in API in the desired
     * language. Visit [request parameter section](https://www.weatherapi.
     * com/docs/#intro-request) to check 'lang-code'.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getRealtimeWeather(q, lang, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/current.json';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            q,
            lang,
            key: _configuration.key,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CurrentJsonResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'Error code 1003: Parameter \'q\' not provided.Error code 1005: API request url is invalid.Error code 1006: No location found matching parameter \'q\'Error code 9999: Internal application error.',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Error code 1002: API key not provided.Error code 2006: API key provided is invalid',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const _err = { errorMessage: 'Error code 2007: API key has exceeded calls per month quota.<br />Error code 2008: API key has been disabled.',
                        errorCode: 403,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Forecast weather API method returns upto next 10 day weather forecast and weather alert as
     * json. The data is returned as a Forecast Object.<br />Forecast object contains astronomy
     * data, day weather forecast and hourly interval weather information for a given city.
     *
     * @param {string} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address,
     * Latitude/Longitude (decimal degree) or city name. Visit [request parameter
     * section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {int} days Number of days of weather forecast. Value ranges from 1 to 10
     * @param {date} dt (optional) Date should be between today and next 10 day in yyyy-MM-dd
     * format
     * @param {int} unixdt (optional) Please either pass 'dt' or 'unixdt' and not both in same
     * request.<br />unixdt should be between today and next 10 day in Unix
     * format
     * @param {int} hour (optional) Must be in 24 hour. For example 5 pm should be hour=17, 6 am as
     * hour=6
     * @param {string} lang (optional) Returns 'condition:text' field in API in the desired
     * language. Visit [request parameter section](https://www.weatherapi.
     * com/docs/#intro-request) to check 'lang-code'.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getForecastWeather(q, days, dt, unixdt, hour, lang, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/forecast.json';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            q,
            days,
            dt: _apiHelper.stringifyDateTime(dt, 'date'),
            unixdt,
            hour,
            lang,
            key: _configuration.key,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'ForecastJsonResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'Error code 1003: Parameter \'q\' not provided.Error code 1005: API request url is invalid.Error code 1006: No location found matching parameter \'q\'Error code 9999: Internal application error.',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Error code 1002: API key not provided.Error code 2006: API key provided is invalid',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const _err = { errorMessage: 'Error code 2007: API key has exceeded calls per month quota.<br />Error code 2008: API key has been disabled.',
                        errorCode: 403,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * History weather API method returns historical weather for a date on or after 1st Jan, 2015
     * as json. The data is returned as a Forecast Object.
     *
     * @param {string} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address,
     * Latitude/Longitude (decimal degree) or city name. Visit [request parameter
     * section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {date} dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format
     * @param {int} unixdt (optional) Please either pass 'dt' or 'unixdt' and not both in same
     * request.<br />unixdt should be on or after 1st Jan, 2015 in Unix format
     * @param {date} endDt (optional) Date on or after 1st Jan, 2015 in yyyy-MM-dd format'end_dt'
     * should be greater than 'dt' parameter and difference should not be more
     * than 30 days between the two dates.
     * @param {int} unixendDt (optional) Date on or after 1st Jan, 2015 in Unix Timestamp format<br
     * />unixend_dt has same restriction as 'end_dt' parameter. Please
     * either pass 'end_dt' or 'unixend_dt' and not both in same request. e.
     * g.: unixend_dt=1490227200
     * @param {int} hour (optional) Must be in 24 hour. For example 5 pm should be hour=17, 6 am as
     * hour=6
     * @param {string} lang (optional) Returns 'condition:text' field in API in the desired
     * language. Visit [request parameter section](https://www.weatherapi.
     * com/docs/#intro-request) to check 'lang-code'.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getHistoryWeather(q, dt, unixdt, endDt, unixendDt, hour, lang, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/history.json';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            q,
            dt: _apiHelper.stringifyDateTime(dt, 'date'),
            unixdt,
            end_dt: _apiHelper.stringifyDateTime(endDt, 'date'),
            unixend_dt: unixendDt,
            hour,
            lang,
            key: _configuration.key,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'HistoryJsonResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'Error code 1003: Parameter \'q\' not provided.Error code 1005: API request url is invalid.Error code 1006: No location found matching parameter \'q\'Error code 9999: Internal application error.',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Error code 1002: API key not provided.Error code 2006: API key provided is invalid',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const _err = { errorMessage: 'Error code 2007: API key has exceeded calls per month quota.<br />Error code 2008: API key has been disabled.',
                        errorCode: 403,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of
     * Location object.
     *
     * @param {string} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address,
     * Latitude/Longitude (decimal degree) or city name. Visit [request parameter
     * section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static searchAutocompleteWeather(q, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/search.json';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            q,
            key: _configuration.key,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'SearchJsonResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'Error code 1003: Parameter \'q\' not provided.Error code 1005: API request url is invalid.Error code 1006: No location found matching parameter \'q\'Error code 9999: Internal application error.',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Error code 1002: API key not provided.Error code 2006: API key provided is invalid',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const _err = { errorMessage: 'Error code 2007: API key has exceeded calls per month quota.<br />Error code 2008: API key has been disabled.',
                        errorCode: 403,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * IP Lookup API method allows a user to get up to date information for an IP address.
     *
     * @param {string} q Pass IP address.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getIpLookup(q, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/ip.json';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            q,
            key: _configuration.key,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'IpJsonResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'Error code 1003: Parameter \'q\' not provided.Error code 1005: API request url is invalid.Error code 1006: No location found matching parameter \'q\'Error code 9999: Internal application error.',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Error code 1002: API key not provided.Error code 2006: API key provided is invalid',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const _err = { errorMessage: 'Error code 2007: API key has exceeded calls per month quota.<br />Error code 2008: API key has been disabled.',
                        errorCode: 403,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Return Location Object
     *
     * @param {string} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address,
     * Latitude/Longitude (decimal degree) or city name. Visit [request parameter
     * section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getTimeZone(q, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/timezone.json';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            q,
            key: _configuration.key,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'TimezoneJsonResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'Error code 1003: Parameter \'q\' not provided.Error code 1005: API request url is invalid.Error code 1006: No location found matching parameter \'q\'Error code 9999: Internal application error.',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Error code 1002: API key not provided.Error code 2006: API key provided is invalid',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const _err = { errorMessage: 'Error code 2007: API key has exceeded calls per month quota.<br />Error code 2008: API key has been disabled.',
                        errorCode: 403,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Return Location and Astronomy Object
     *
     * @param {string} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address,
     * Latitude/Longitude (decimal degree) or city name. Visit [request parameter
     * section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {date} dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAstronomy(q, dt, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/astronomy.json';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            q,
            dt: _apiHelper.stringifyDateTime(dt, 'date'),
            key: _configuration.key,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'AstronomyJsonResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'Error code 1003: Parameter \'q\' not provided.Error code 1005: API request url is invalid.Error code 1006: No location found matching parameter \'q\'Error code 9999: Internal application error.',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Error code 1002: API key not provided.Error code 2006: API key provided is invalid',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const _err = { errorMessage: 'Error code 2007: API key has exceeded calls per month quota.<br />Error code 2008: API key has been disabled.',
                        errorCode: 403,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = APIsController;
